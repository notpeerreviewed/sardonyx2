gather(category, tonnes, Auto:Bulk) %>%
mutate(year = year(date),
mth = month(date)) %>%
group_by(year, mth) %>%
summarise(tonnes = sum(tonnes)) %>%
ungroup() %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t)
View(sectoral_monthly)
View(monthly_data)
View(annual_data)
View(monthised_annual_LPG)
monthised_annual_LPG <- annual_data %>%
select(-Total) %>%
gather(category, tonnes, Auto:Bulk) %>%
full_join(month_prop, by = "category") %>%
mutate(volume = tonnes * prop) %>%
select(year, mth, category, volume) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume)
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01")
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(volume = sum(volume)) %>%
ungroup()
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(volume = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t)
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t)
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t) %>%
gather(category, tonnes, Agriculture_t:Transport_t)
ggplot(sectoral_monthly, aes(x = date, y = tonnes, colour = category)) + geom_line()
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t) %>%
gather(category, tonnes, Agriculture_t:Transport_t) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")))
ggplot(sectoral_monthly, aes(x = date, y = tonnes, colour = category)) + geom_line()
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture_t = tonnes * Agriculture,
Industrial_t = tonnes * Industrial,
Commercial_t = tonnes * Commercial,
Residential_t = tonnes * Residential,
Transport_t = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t) %>%
gather(category, tonnes, Agriculture_t:Transport_t) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
quartered_sectoral_LPG <- sectoral_monthly %>%
group_by(year, qtr, category) %>%
summarise(tonnes = sum(tonnes)) %>%
ungroup() %>%
mutate(date = ymd(paste0(year, "-", qtr*3, "-01")))
ggplot(quartered_sectoral_LPG, aes(x = date, y = tonnes, colour = category)) + geom_line()
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable")
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport)
View(webtable_data)
ggplot(webtable_data, aes(x = date, y = kt, colour = category)) + geom_line()
View(sectoral_monthly)
View(quartered_sectoral_LPG)
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport) %>%
mutate(tonnes = kt*1000)
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport) %>%
mutate(tonnes = kt*1000) %>%
select(date, category, tonnes) %>%
bind_rows(quartered_sectoral_LPG)
str(webtable_data)
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport) %>%
mutate(tonnes = kt*1000,
date = ymd(date)) %>%
select(date, category, tonnes) %>%
bind_rows(quartered_sectoral_LPG)
quartered_sectoral_LPG <- sectoral_monthly %>%
group_by(year, qtr, category) %>%
summarise(tonnes = sum(tonnes)) %>%
ungroup() %>%
mutate(date = ymd(paste0(year, "-", qtr*3, "-01")),
source = "historical")
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport) %>%
mutate(tonnes = kt*1000,
date = ymd(date),
source = "webtable") %>%
select(date, category, tonnes, source) %>%
bind_rows(quartered_sectoral_LPG)
ggplot(webtable_data, aes(x = date, y = tonnes, colour = category)) + geom_line() + facet_wrap(~source)
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture = tonnes * Agriculture,
Industrial = tonnes * Industrial,
Commercial = tonnes * Commercial,
Residential = tonnes * Residential,
Transport = tonnes * Transport) %>%
select(year, mth, Agriculture_t:Transport_t) %>%
gather(category, tonnes, Agriculture_t:Transport_t) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture = tonnes * Agriculture,
Industrial = tonnes * Industrial,
Commercial = tonnes * Commercial,
Residential = tonnes * Residential,
Transport = tonnes * Transport) %>%
select(year, mth, Agriculture:Transport) %>%
gather(category, tonnes, Agriculture:Transport) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
quartered_sectoral_LPG <- sectoral_monthly %>%
group_by(year, qtr, category) %>%
summarise(tonnes = sum(tonnes)) %>%
ungroup() %>%
mutate(date = ymd(paste0(year, "-", qtr*3, "-01")),
source = "historical")
ggplot(quartered_sectoral_LPG, aes(x = date, y = tonnes, colour = category)) + geom_line()
View(month_grouped)
View(month_prop)
# now we get the sectoral proportions we took directly from the current spreadsheet
sectoral_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Sectoral")
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture = tonnes * Agriculture,
Industrial = tonnes * Industrial,
Commercial = tonnes * Commercial,
Residential = tonnes * Residential,
Transport = tonnes * Transport) %>%
select(year, mth, Agriculture:Transport) %>%
gather(category, tonnes, Agriculture:Transport) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
# now we get the sectoral proportions we took directly from the current spreadsheet
sectoral_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Sectoral")
# aggregate the monthly data to national level
sectoral_monthly <- monthised_annual_LPG %>%
select(date, category, volume) %>%
filter(date > "1989-12-01") %>%
group_by(date) %>%
summarise(tonnes = sum(volume)) %>%
ungroup() %>%
mutate(year = year(date),
mth = month(date)) %>%
full_join(sectoral_data, by = 'year') %>%
mutate(Agriculture = tonnes * Agriculture,
Industrial = tonnes * Industrial,
Commercial = tonnes * Commercial,
Residential = tonnes * Residential,
Transport = tonnes * Transport) %>%
select(year, mth, Agriculture:Transport) %>%
gather(category, tonnes, Agriculture:Transport) %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")),
qtr = quarter(date))
quartered_sectoral_LPG <- sectoral_monthly %>%
group_by(year, qtr, category) %>%
summarise(tonnes = sum(tonnes)) %>%
ungroup() %>%
mutate(date = ymd(paste0(year, "-", qtr*3, "-01")),
source = "historical")
# load webtable LPG data for comparison
webtable_data <- read_excel("G:/lpg/historical_lpg.xlsx", sheet = "Webtable") %>%
gather(category, kt, Agriculture:Transport) %>%
mutate(tonnes = kt*1000,
date = ymd(date),
source = "webtable") %>%
select(date, category, tonnes, source) %>%
bind_rows(quartered_sectoral_LPG)
ggplot(webtable_data, aes(x = date, y = tonnes, colour = category)) + geom_line() + facet_wrap(~source)
View(month_prop)
View(month_grouped)
# calculate the proportions of each LPG category by month annually
month_prop <- month_grouped %>%
group_by(yr, category) %>%
summarise_at(vars(Jan:Dec), funs(./Total)) %>% # this calculates the proportion of total of each column
ungroup() %>%
gather(mth, prop, Jan:Dec) %>%
group_by(category, mth) %>%
# here is where things might be a bit different to the current series
# we use the average proportion for each month across the period 2012 to 2017
# ie for the Auto category, we take all the January proportions from 2012 to 2017 and take the mean
# this makes the seasonality a little too perfect across the series, but it is better than the current method
# future methods should seek to back cast the proportions to 1990, but this would
# potentially be just as incorrect as doing things this way
summarise(prop = mean(prop)) %>%
ungroup()
month_prop <- month_grouped %>%
group_by(yr, category) %>%
summarise_at(vars(Jan:Dec), funs(./Total)) %>% # this calculates the proportion of total of each column
ungroup() %>%
gather(mth, prop, Jan:Dec)
test <- month_prop %>%
mutate(date = ymd(paste0(year, "-", mth, "-01")))
View(test)
test <- month_prop %>%
mutate(date = ymd(paste0(yr, "-", mth, "-01")))
ggplot(test, aes(x = date, y = prop, colour = category)) + geom_line()
# calculate the proportions of each LPG category by month annually
month_prop <- month_grouped %>%
group_by(yr, category) %>%
summarise_at(vars(Jan:Dec), funs(./Total)) %>% # this calculates the proportion of total of each column
ungroup() %>%
gather(mth, prop, Jan:Dec) %>%
group_by(category, mth) %>%
# here is where things might be a bit different to the current series
# we use the average proportion for each month across the period 2012 to 2017
# ie for the Auto category, we take all the January proportions from 2012 to 2017 and take the mean
# this makes the seasonality a little too perfect across the series, but it is better than the current method
# future methods should seek to back cast the proportions to 1990, but this would
# potentially be just as incorrect as doing things this way
summarise(prop = mean(prop)) %>%
ungroup()
View(month_prop)
test <- month_prop %>%
mutate(date = ymd(paste0("2012-", mth, "-01"))) %>%
select(date, category, prop)
ggplot(test, aes(x = date, y = prop, colour = category)) + geom_line()
devtools::install_github("rstudio/blogdown")
library(devtools)
install.packages(devtools)
install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::install_hugo()
131-67
box_office <- read.csv("D:/boxoffice/boxoffice_mar_2019.csv")
box_office <- read.csv("D:/boxoffice/boxoffice_march_2019.csv")
View(box_office)
View(box_office)
install.packages("boxoffice")
library(boxoffice)
test <- boxoffice(dates = as.Date(c("2019-01-01", "2019-04-30")), site = "numbers")
View(test)
dates <- seq.Date(from = "2019-01-01", to = "2019-04-30", by = "day")
dates <- seq.Date(from = as.Date("2019-01-01"), to = as.Date("2019-04-30"), by = "day")
test <- boxoffice(dates = as.Date(dates, site = "numbers")
)
View(test)
dates <- seq.Date(from = as.Date("1990-01-01"), to = as.Date("2019-04-30"), by = "day")
movies <- boxoffice(dates = as.Date(dates, site = "numbers"))
dates <- seq.Date(from = as.Date("1990-01-01"), to = as.Date("2019-04-30"), by = "day")
movies <- boxoffice(dates = as.Date(dates, site = "numbers"))
dates <- seq.Date(from = as.Date("2000-01-01"), to = as.Date("2019-04-30"), by = "day")
movies <- boxoffice(dates = as.Date(dates, site = "numbers"))
View(movies)
library(dplyr)
library(tidyr)
library(lubridate)
getwd()
movies <- read.csv("D:/boxoffice/movies.csv")
View(movies)
movies_df <- movies %>%
mutate(year = str_split(month, start = 1, end = 4))
library(stringr)
movies_df <- movies %>%
mutate(year = str_split(month, start = 1, end = 4))
movies_df <- movies %>%
mutate(year = str_sub(month, start = 1, end = 4))
str(movies)
movies <- read.csv("D:/boxoffice/movies.csv", stringsAsFactors = F)
movies_df <- movies %>%
mutate(year = str_sub(month, start = 1, end = 4))
str(movies)
movies_df <- movies %>%
mutate(year = str_sub(Month, start = 1, end = 4))
View(movies_df)
movies_df <- movies %>%
separate(Month, into = c("year", "month"), sep = "M")
movies_df <- movies %>%
separate(Month, into = c("year", "month"), sep = "M",
date = make_date(year, month))
View(movies)
install.packages("remoates")
install.packages("remotes")
remotes::install_github("GIScience/openrouteservice-r")
remotes::install_github("GIScience/openrouteservice-r")
remotes::install_github("GIScience/openrouteservice-r")
remotes::install_github("GIScience/openrouteservice-r")
library(openrouteservice)
ors_api_key("<your-api-key>")
ors_api_key("5b3ce3597851110001cf62480adf4ed910fb4fc583fd87ad036b6858")
library(leaflet)
install.packages("mapview")
coordinates <- list(c(-40.983040, 174.959292))
res <- ors_isochrones(coordinates, range = 3600, interval = 1200, output = "sf")
res
coordinates <- data.frame(lon = 174.959292, lat = -40.983040)
## 1 hour range split into 20 minute intervals
res <- ors_isochrones(coordinates, range = 3600, interval = 1200, output = "sf")
values <- levels(factor(res$value))
ranges <- split(res, values)
ranges <- ranges[rev(values)]
names(ranges) <- sprintf("%s min", as.numeric(names(ranges))/60)
mapview(ranges, alpha.regions = 0.2, homebutton = FALSE, legend = FALSE)
library(mapview)
mapview(ranges, alpha.regions = 0.2, homebutton = FALSE, legend = FALSE)
## 1 hour range split into 20 minute intervals
res <- ors_isochrones(coordinates, range = 3600*2, interval = 1200, output = "sf")
install.packages("osmdata")
# testing osmdata
library(osmdata)
q <- opq (getbb ("auckland"))
View(q)
q <- opq ("new zealand")
q <- opq ("new zealand") %>%
add_osm_feature (key = "highway")
View(q)
q <- opq ("new zealand") %>%
add_osm_feature (key = "highway") %>%
osmdata_sf()
View(q)
View(q)
osm_lines(q)
bus <- q$osm_points [which (q$osm_points$highway == 'bus_stop'),] %>%
rownames () # all OSM IDs of bus stops
osm_lines (q, bus)
library('httr')
library('XML')
library('dplyr')
url <- "http://www.odata.charities.govt.nz"
response <- GET(url)
responseContent <- content(response,type="text/xml")
responseContent
xmlNames <- xpathSApply(responseContent,'//m:properties[1]/d:*',xmlName)
xmlNames <- xpathSApply(responseContent,'//m:properties[1]/d:*',xmlName)
?xpathSApply
responseContent
responseContent[1]
responseContent[[1]]
responseContent
xml.url <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- xmlTreeParse(xml.url)
xmlfile <- xmlTreeParse(xml.url)
library(XML)
library(httr)
xml.url <- "http://www.w3schools.com/xml/plant_catalog.xml"
test <- GET(xml.url)
View(test)
test <- GET(xml.url)$content
test <- rawToChar(GET(xml.url)$content)
plants <- xmlParse(rawToChar(GET(xml.url)$content))
plants.l <- t(xmlToList(plants, simplify = TRUE))
length(plants.l)
# responseContent <- content(response,type="text/xml")
responseContent <- xmlParse(rawToChar(GET(url)$content))
# xmlNames <- xpathSApply(responseContent,'//m:properties[1]/d:*',xmlName)
xmlNames <- t(xmlToList(responseContent, simplify = TRUE))
url <- "http://www.odata.charities.govt.nz/Organisations?$orderby=Name"
response <- GET(url)
responseContent <- content(response,type="text/xml")
?content
responseContent <- xmlTreeParse(readLines(response, encoding = "UTF-8"), useInternalNodes=TRUE)
response <- GET(url)
responseContent <- content(response,type="text/xml")
txt = readLines(response, encoding = "UTF-8")
txt = readLines(GET(url), encoding = "UTF-8")
library('httr')
library('XML')
library('dplyr')
url <- "http://www.odata.charities.govt.nz/Organisations?$orderby=Name"
url <- "http://www.odata.charities.govt.nz/Organisations?$orderby=Name"
response <- GET(url)
?GET
test <- xmlTreeParse(url, isURL = T)
xmltop = xmlRoot(test)
# have a look at the XML-code of the first subnodes:
print(xmltop)[1:2]
url <- "http://www.odata.charities.govt.nz/Organisations?$filter=substringof('coastguard', Name) eq true"
test <- xmlTreeParse(url, isURL = T)
xmltop = xmlRoot(test)
# have a look at the XML-code of the first subnodes:
print(xmltop)[1:2]
xmlNames <- xpathSApply(test,'//m:properties[1]/d:*',xmlName)
values <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
View(test)
data <- read_xml(test)
library(xml2)
data <- read_xml(test)
?read_xml
data <- read_xml(url)
response <- GET(url)
View(response)
library(jsonlite)
coastguards <- GET(url)
coastguards
url <- "http://www.odata.charities.govt.nz/Organisations?$filter=substringof(%27coastguard%27,%20Name)%20eq%20true"
coastguards <- GET(url)
coastguards
df1 <- content(coastguards, "text")
df1
coastguards
df2 <- fromJSON(df1, flatten = TRUE)
View(df2)
library(magrittr)
df2 <- fromJSON(df1, flatten = TRUE) %>% as.data.frame()
View(df2)
url <- "http://www.odata.charities.govt.nz/Organisations?$filter=substringof(%27coastguard%27,%20Name)%20eq%20true&?$expand=AnnualReturn"
coastguards <- GET(url)
coastguards
df1 <- content(coastguards, "text")
df2 <- fromJSON(df1, flatten = TRUE) %>% as.data.frame()
View(df2)
colnames(df2)
library(servr)
setwd("D:/sardonyx2/sardonyx_dashboard_v2")
httw()
